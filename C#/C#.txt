using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
        }
    }
}

method/function called Main
methods have inputs and outputs
what goes in paranthesis is the input to the method (which we call parameter or argument)
in this case, the parameter is named args, which is of type - string array
what you see before the method name is the return type, or the output of the method
void in C# means nothing - which means this method does not return any value. It just contains some code, that's it.

using System; (highlighted)
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World");
        }
    }
}

// Hello World

using System is highlighted, while the others are greyed out. The reason for that is we are using a class called Console that is defined in the system namespace. That is why that using System is active. We are not using any classes defined in other namespaces, that is why they are greyed out. So we can get rid of them to make our code cleaner

Primitive Types

Variables and Constants
Variable: a name given to a storage location in memory
Constant: an immutable value

in C#, to declare a variable, we start with a type, followed by an identifier, and finally semicolon

int number;
int Number = 1;
const float Pi = 3.14f;

also note that C# is a case sensitive language

Identifier Rules:
Cannot start with a number:
1route
Cannot include a whitespace:
first name
Cannot be a reserved keyword:
int
Reccomendation: Use meaningful names
firstName instead of fn 

Popular Naming Conventions in the C language family
Camel Case: firstName
Pascal Case: FirstName
Hungarian Notation: strFirstName (prefixing the name of a variable, with the data type it uses) - usually not used in C#, but other C programming languages

For C#, to name your local variables, use Camel Case
int number;

For constants, use Pascal Case
const int MaxZoom = 5;

Here is a list of most commonly used, primitive types in C# (see screenshot in folder):

Integral Numbers
byte
short
int
long

Real Numbers
float
double (default)
decimal

Character
char 

Boolean
bool 


Most of these data types are pretty stragiht forward, but there is something tricky about Real Numbers
float number = 1.2f; (have to add the suffix f to floats)
decimal number = 1.2m; (have to add the suffix m to decimals)

Non-Primitive Types
String 
Array 
Enum 
Class 

Overflowing
byte number = 255; (the largest number you can store in a byte)
number = number + 1 (trying to store 256 in the number)
// 0

you will see zero in the console. This is what we call overflowing. 

Sometimes this is not desirable in your application. You want to stop overlowing. If that's the case, you need to use the checked keyword

checked
{
    byte number = 255;

    number = number + 1;
}

If you use the checked keyword, overflow will not happen and instead the program will throw an exception

The topic of exception is an advanced topic, and I have covered it in my C# advanced course

Now do we really need this in reality? Not really. If you were really worried about overflow, all you would have to do is change your data type to short, or something else. We are just reviewing this so that you are aware of how overflow works



